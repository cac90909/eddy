dashboard
Dashboard: id, name, description, visual_bids, visual_layouts, theme, layout
- i think we need  viz layout vals regardless of if visuals have ability to be dynamically re-ordered
on the frontend side, since we need a defaul value
- theme would be things like color, template for layout, others
- user table would have to have a list of dashboard ids associated with it, then we just query that to display all their dashboards
- would maybe have to introduce pagination here because if the user loads into dashboard, they may have 10 dashboards
        - which means this could have like 50 underlying snapshots, each of those have 2-7 underlying operations
        - instead, the user is able to tab through theirdashboards rather than loading all at once (lazy v eager)
- layout would refer to a general temlpate for layout (ex: 4 corners, 2 top 1 bottom)
        - or perhaps this would be dynamically generated by react library invoked here since
        - visual would contain param information like width/height (or maybe this is also)
        - dynamically generated, it will likely depend on the library we use


visualizations
- it may make sense to turn this into its own microservice, in the same way explorer is used to 
- create snapshots, and those snapshots fuel visualizations, we could use the visualizatoin microservice
- to fuel dashboards and have dashboards be its own thing, which would also simplify the UI as well, 
- since we wouldnt have to overwhelm the dashboard page with a section for creating visualizations
- rather dashboards is solely used for compiling visualizations into dashboard format and applying
- dashboard paramters
Visual: id, snapshot_bid, visual_type, visual_theme, dashboard_bid, visual_attributes
- visual_type would be things like bar chart, table,
- visual_theme could be things like color or bars, line weight of graph, etc
- since we dont have a visual without an underlying snapshot, we need cascading deletes to delete the visual if the snapshot is deleted
- visual_attributes would be things like width and height, unsure if this will be static or dynamic
    - right now, depends on react lib and also if this would be something contained within
    - the visual object or dashboard obj


data_connector (or data input or smthn)
template
- like for my notes app, if I abide by a certain template, it will make it easier to input
- this also means definining a schema:
---------ex: func: alb will have these json keys, values taking this general format
- tempate can try to identify things in the note, and assign it to the schema
    - may be hard to differentiate sometimes (like if in my note, I have two dates (one for 
    - doc created date and the other pertaining to a json key's value))
    - we can have things that we are confident about assignment to be left to user
    - may be able to utilize some level of ai here (differentiating between an objective note vs 
    a subjective journal)
source: source_name, template_bid
scehma:
- probably wouldn't be specific as a data connector obj, but reside in the same dir as universal since
    - schemas directly relate to underlying data
data connector vs data input: these may be two parts to the same microservice, since data connector
implies an automatic data transfer but there are probably times when I dont have any underlying 
notes app data and just want to input directly into my universal db 
    - but i suppose a nuance of that is that data connector would involve some level manual user input
    - as well since user needs to resolve things not deciphered by the system/there is a possibility
    - that there is some level of this process that the user would have to manually do regardless
    - Perhaps the process would always be: connect to source -> input addl/main info
          - since regardless of even if i automated the entire data connecting process, id like the 
          - chance to review the data being created in a visual tabular format 


